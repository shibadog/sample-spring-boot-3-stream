# logging
logging:
  pattern:
    console: "%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) [%X{traceId}-%X{spanId}] %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"

# actuator
management:
  health:
    rabbit:
      enabled: true
    binders:
      enabled: true

  endpoints:
    web:
      exposure:
        include:
        - "*"

  tracing:
    enabled: true
    propagation: 
      type: b3
    sampling:
      probability: 1.0

  zipkin:
    tracing:
      connect-timeout: 2s
      read-timeout: 5s
      endpoint: http://localhost:9411/api/v2/spans

# spring
spring:
  application:
    name: @project.name@

  rabbitmq:
    host: localhost
    port: 5672
    username: admin
    password: admin
    address-shuffle-mode: RANDOM
    addresses: localhost:5673,localhost:5674,localhost:5675

  cloud:
    function:
      definition: functionRouter # 独自のFunctionRouterを作った場合はそのBean名を定義
      # routing-expression: "headers['path'] == '/service/hoge' ? 'routingConsumeHoge' : headers['path'] == '/service/fuga' ? 'routingConsumeFuga' : null"
      # この記述はBean定義に移動した。

    stream:
      function:

        bindings:
          functionRouter-in-0: input # 独自に定義したFunctionRouterもBean名で定義できる

      bindings:
        input: # ラベルで指定
          group: service
          destination: listener
          content-type: application/json
          consumer:
            concurrency: 10 # consumer thread count
            max-attempts: 3 # retry count

      rabbit:
        bindings:
          consume-in-0: # ラベルで紐づけはできないらしい
            consumer:
              auto-bind-dlq: true # lint errorなるけど多分効いている
              # 自動で、 `{destination}.{group}.dlq` というキューに入る
              # exchangeはDLXが使われるらしい。
